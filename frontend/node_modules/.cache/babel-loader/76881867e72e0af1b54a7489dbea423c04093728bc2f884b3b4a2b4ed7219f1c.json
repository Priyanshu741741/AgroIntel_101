{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Priyanshu\\\\OneDrive\\\\Desktop\\\\crop-monitoring-app - Copy\\\\frontend\\\\src\\\\pages\\\\DashboardPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Alert } from 'react-bootstrap';\nimport ImageUpload from '../components/ImageUpload';\nimport AnalysisResults from '../components/AnalysisResults';\nimport { getModelInfo } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardPage = () => {\n  _s();\n  const [analysisResults, setAnalysisResults] = useState(null);\n  const [analyzedImageUrl, setAnalyzedImageUrl] = useState(null);\n  const [modelStatus, setModelStatus] = useState({\n    loading: true,\n    error: null\n  });\n  useEffect(() => {\n    const checkModelStatus = async () => {\n      try {\n        await getModelInfo();\n        setModelStatus({\n          loading: false,\n          error: null\n        });\n      } catch (error) {\n        setModelStatus({\n          loading: false,\n          error: \"The model may not be available. Please ensure the backend is running and the model is trained.\"\n        });\n      }\n    };\n    checkModelStatus();\n  }, []);\n  const handleAnalysisComplete = (results, imageUrl) => {\n    setAnalysisResults(results);\n    setAnalyzedImageUrl(imageUrl);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"py-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mb-4\",\n      children: \"Crop Analysis Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), modelStatus.error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"warning\",\n      className: \"mb-4\",\n      children: modelStatus.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        lg: 5,\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(ImageUpload, {\n          onAnalysisComplete: handleAnalysisComplete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        lg: 7,\n        children: analysisResults && /*#__PURE__*/_jsxDEV(AnalysisResults, {\n          results: analysisResults,\n          imageUrl: analyzedImageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardPage, \"jLgbpZ52UHWaOTIASJVXityGWmE=\");\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","Alert","ImageUpload","AnalysisResults","getModelInfo","jsxDEV","_jsxDEV","DashboardPage","_s","analysisResults","setAnalysisResults","analyzedImageUrl","setAnalyzedImageUrl","modelStatus","setModelStatus","loading","error","checkModelStatus","handleAnalysisComplete","results","imageUrl","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","lg","onAnalysisComplete","_c","$RefreshReg$"],"sources":["C:/Users/Priyanshu/OneDrive/Desktop/crop-monitoring-app - Copy/frontend/src/pages/DashboardPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col, Alert } from 'react-bootstrap';\r\nimport ImageUpload from '../components/ImageUpload';\r\nimport AnalysisResults from '../components/AnalysisResults';\r\nimport { getModelInfo } from '../services/api';\r\n\r\nconst DashboardPage = () => {\r\n  const [analysisResults, setAnalysisResults] = useState(null);\r\n  const [analyzedImageUrl, setAnalyzedImageUrl] = useState(null);\r\n  const [modelStatus, setModelStatus] = useState({ loading: true, error: null });\r\n\r\n  useEffect(() => {\r\n    const checkModelStatus = async () => {\r\n      try {\r\n        await getModelInfo();\r\n        setModelStatus({ loading: false, error: null });\r\n      } catch (error) {\r\n        setModelStatus({ \r\n          loading: false, \r\n          error: \"The model may not be available. Please ensure the backend is running and the model is trained.\"\r\n        });\r\n      }\r\n    };\r\n    \r\n    checkModelStatus();\r\n  }, []);\r\n\r\n  const handleAnalysisComplete = (results, imageUrl) => {\r\n    setAnalysisResults(results);\r\n    setAnalyzedImageUrl(imageUrl);\r\n  };\r\n\r\n  return (\r\n    <Container className=\"py-4\">\r\n      <h2 className=\"mb-4\">Crop Analysis Dashboard</h2>\r\n      \r\n      {modelStatus.error && (\r\n        <Alert variant=\"warning\" className=\"mb-4\">\r\n          {modelStatus.error}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Row>\r\n        <Col lg={5} className=\"mb-4\">\r\n          <ImageUpload onAnalysisComplete={handleAnalysisComplete} />\r\n        </Col>\r\n        \r\n        <Col lg={7}>\r\n          {analysisResults && (\r\n            <AnalysisResults \r\n              results={analysisResults} \r\n              imageUrl={analyzedImageUrl} \r\n            />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DashboardPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}